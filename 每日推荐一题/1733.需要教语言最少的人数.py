"""
1733. 需要教语言的最少人数
在一个由 m 个用户组成的社交网络里，我们获取到一些用户之间的好友关系。两个用户之间可以相互沟通的条件是他们都掌握同一门语言。

给你一个整数 n ，数组 languages 和数组 friendships ，它们的含义如下：

总共有 n 种语言，编号从 1 到 n 。
languages[i] 是第 i 位用户掌握的语言集合。
friendships[i] = [ui,vi ] 表示 ui 和 vi 为好友关系。
你可以选择 一门 语言并教会一些用户，使得所有好友之间都可以相互沟通。请返回你 最少 需要教会多少名用户。

请注意，好友关系没有传递性，也就是说如果 x 和 y 是好友，且 y 和 z 是好友， x 和 z 不一定是好友。
"""

# 只教一门
# 贪心算法，无法交流的人中，人数-最多人会的语言=教的最少人数。
class Solution:
    def minimumTeachings(self, n: int, languages: list[list[int]], friendships: list[list[int]]) -> int:
        d = [0] * n
        people = set()
        for fs in friendships:
            ss = languages[fs[0] - 1]+ languages[fs[1] - 1]
            sets = set(ss)
            if len(sets) < len(ss):  # 表示能交流
                continue
            else:
                # print(fs)
                if fs[0] not in people:
                    people.add(fs[0])
                    for i in languages[fs[0]-1]:
                        d[i-1] += 1
                if fs[1] not in people:
                    people.add(fs[1])
                    for i in languages[fs[1]-1]:
                        d[i-1] += 1
        print(d)
        print(people)
        return len(people) - max(d)

if __name__ == '__main__':
    n = 23
    languages = [[14,7,16,22,23],[16,17,1],[13,15,3,5,9,10,8,6,7,23,16,12,17,4,19,2],[5,11,12],[13,23,17,9,3,21,15,1,16,18,7,19,14,11,5,6,8,10,4,22],[5,9,15,14,6,21,16,3,19,1],[16,19,21,6,5,2,8,10,20,12,9,22,13,3,1,23,11,18,14],[19,12,21,8,22,7,17,2,16,4,5,20,15,3,1,6,18,10,23,9,14,13,11],[1,7,17,4,11,2,3,5,8],[10,20,14,4,11,7],[23,11,15],[14,9,21,7,19,18,4,20,10,15,17,3,23,12,6,13],[2],[9,7,2,10,20,3,21,22]]
    friendships = [[7,13],[7,10],[6,13],[4,8],[4,7],[2,3],[1,3],[5,7],[1,6],[5,11],[7,12],[4,9],[3,12],[10,12],[2,8],[5,8],[7,8],[1,4],[5,10],[9,12],[8,10],[1,9],[2,10],[6,8],[8,13],[4,11],[3,9],[6,12],[5,6],[8,9],[3,13],[3,6],[5,12],[11,12],[1,11],[4,5],[2,7],[6,10],[8,12],[3,5],[9,10],[10,13],[1,5],[1,2],[12,13],[1,13],[7,11],[4,12],[5,9],[2,11],[2,4],[1,8],[2,13],[10,11],[2,9],[9,13],[8,11],[2,5],[2,6],[3,8],[7,9],[6,11],[9,11],[3,10]]
    s = Solution().minimumTeachings(n, languages, friendships)
    print(s)

